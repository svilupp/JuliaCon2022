var documenterSearchIndex = {"docs":
[{"location":"resources/#Resources","page":"Resources","title":"Resources","text":"","category":"section"},{"location":"resources/#Various-Introductory-texts","page":"Resources","title":"Various Introductory texts","text":"","category":"section"},{"location":"resources/","page":"Resources","title":"Resources","text":"Marketing Mix Modeling (MMM) – Concepts and Model Interpretation\nLight introduction to Adstock from FastCompany","category":"page"},{"location":"resources/#Industry","page":"Resources","title":"Industry","text":"","category":"section"},{"location":"resources/","page":"Resources","title":"Resources","text":"Google: Bayesian Methods for Media Mix Modeling with Carryover and Shape effects\nGoogle: Challenges and opportunities in Media Mix Modelling\n!!CROWN JEWEL!! Robyn Package from Facebook Research team (experimental). Be careful when using the Weibull transformations (it might be fixed now). A related tutorial\nGoogle: Numpyro package Lightweight MMM\nHello Fresh: Tutorial for Python with PyMC3 here","category":"page"},{"location":"resources/#Frequentist-MMM","page":"Resources","title":"Frequentist MMM","text":"","category":"section"},{"location":"resources/","page":"Resources","title":"Resources","text":"MMM in Python with Statsmodels here\nMMM in Python with ScikitLearn here The author has a full series on the topic - recommended!\nMMM in R here","category":"page"},{"location":"resources/#Probabilistic-MMM","page":"Resources","title":"Probabilistic MMM","text":"","category":"section"},{"location":"resources/","page":"Resources","title":"Resources","text":"MMM with Stan (a multiplicative model) here and here\nMMM package with CLI and configs here\nSimple MMM in PyMC here\nMMM in Python with PyMC3 here Same author as some articles above - he has a full series.\nPyMC Labs post on MMM and also Learning Bayesian Stats podcast / MMM episode\nOrbit / Bayesian Time-Varying Coefficient Regression / BTVC here, package Orbit-ml\nPython tutorial with PyMC3 (and comparison with Robyn) here\nTime-varying saturation coefficients with PyMC3 here\nOrbit / KTR model","category":"page"},{"location":"resources/#Other-/-On-Transformations-on-the-Input-Variables","page":"Resources","title":"Other / On Transformations on the Input Variables","text":"","category":"section"},{"location":"resources/","page":"Resources","title":"Resources","text":"Weibull transformation case study (for Adstock) and here","category":"page"},{"location":"resources/#Other-/-Attribution","page":"Resources","title":"Other / Attribution","text":"","category":"section"},{"location":"resources/","page":"Resources","title":"Resources","text":"Survey attribution in Numpyro here\nAttribution models here\nChannelattribution package in R\nEva Anderl, Ingo Becker, Florian v. Wangenheim, Jan H. Schumann (2014)","category":"page"},{"location":"api_reference/#API-Reference","page":"API Reference","title":"API Reference","text":"","category":"section"},{"location":"api_reference/#Index","page":"API Reference","title":"Index","text":"","category":"section"},{"location":"api_reference/","page":"API Reference","title":"API Reference","text":"","category":"page"},{"location":"api_reference/","page":"API Reference","title":"API Reference","text":"## Docstrings","category":"page"},{"location":"api_reference/","page":"API Reference","title":"API Reference","text":"Modules = [MediaMixModellingDemo]","category":"page"},{"location":"api_reference/#MediaMixModellingDemo.ParamsStage1","page":"API Reference","title":"MediaMixModellingDemo.ParamsStage1","text":"struct ParamsStage1\n    model_name=Val(:any)\n    scales_trend_offset::Float64=0. \n    scales_growth_trend::Float64=1.\n    scales_trend::Float64 = 0.2\n    scales_hols::Float64 = 0.3\n    scales_seas::AbstractArray{Float64} = ones(Float64,1)\n    scales_feat::AbstractArray{Float64} = ones(Float64,1)\n    scales_noise::Float64 = 0.2 \n    cat_levels::Int = 1 \nend\n\nHolds priors and relevant parameters for Stage 1 of the modelling\n\nArguments:\n\nmodel_name=Val(:any) : Symbol representing the model version being fitted\nscalestrendoffset::Float64=0. : Scale (\"width\") of the Normal RV alpha (intercepts for different groups)\nscalesgrowthtrend::Float64=1. : Scale (\"width\") of the Normal RV growth_trend (trend component)\nscalestrend::Float64 = 0.2 : Scale (\"width\") of the Normal RV `betatrend` for input X_trend (flexible trend fitting, eg, with splines)\nscaleshols::Float64 = 0.3 : Scale (\"width\") of the Normal RV `betahols` for input X_hols (holidays features)\nscalesseas::AbstractArray{Float64} = ones(Float64,1) : Scale (\"width\") of the Normal RV `betaseas` for input X_feat (seasonality components)\nscalesfeat::AbstractArray{Float64} = ones(Float64,1) : Scale (\"width\") of the Normal RV `betafeat` for input X_feat (concatenated features)\nscales_noise::Float64 = 0.2 : Extent of the random noise around deterministic trend / rate parameter of Exponential distribution for sigma\ncatlevels::Int = 1 : Number of categorical levels in RV alpha that will be provided in Xcat vector (allows for different intercepts for different groups)\n\nExample:\n\nSet priors with automated priors like this:\n\np1=ParamsStage1(\n    model_name=Val(Symbol(MODEL_NAME_PREFIT)),\n    scales_trend=0.2,\n    scales_hols=0.3,\n    scales_noise=0.2,\n    cat_levels=1\n)\np1=set_priors_stage1_trendline(y_std,p1)\np1=set_priors_auto_scales(y_std,X_seas,:scales_seas,1.0,p1)\np1=set_priors_auto_scales(y_std,X_feat,:scales_feat,1.0,p1)\n\n\n\n\n\n","category":"type"},{"location":"api_reference/#MediaMixModellingDemo.ParamsStage2","page":"API Reference","title":"MediaMixModellingDemo.ParamsStage2","text":"struct ParamsStage2\n    model_name=Val(:any)\n    scales_trend_offset::Float64 = 0.3\n    scales_trend::Float64 = 0.2\n    scales_noise::Float64 = 0.3\n    scales_context::AbstractArray{Float64} = ones(Float64,1)\n    scales_org::AbstractArray{Float64} = ones(Float64,1)\n\n    decay_rate_alphas::AbstractArray{Float64} = ones(Float64,1)\n    decay_rate_betas::AbstractArray{Float64} = ones(Float64,1)\n\n    adspend_mean_nonzero::AbstractArray{Float64} = ones(Float64,1)\n    adspend_median::AbstractArray{Float64} = ones(Float64,1)\n\n    locs_spend_halfmaxpoint::AbstractArray{Float64} = ones(Float64,1)\n    scales_spend_halfmaxpoint::AbstractArray{Float64} = ones(Float64,1)\n\n    locs_spend_beta::AbstractArray{Float64} = ones(Float64,1) \n    scales_spend_beta::AbstractArray{Float64} = ones(Float64,1)\n    units_ratio_spend_to_y::AbstractArray{Float64} = ones(Float64,1)\n    factor_to_roas_of_one::AbstractArray{Float64} = units_ratio_spend_to_y .* 2\nend\n\nHolds priors and relevant parameters for Stage 2 of the modelling\n\nFor easy set up, use utility functions that build it from the inputs\n\nArguments:\n\nmodel_name=Val(:any) : Symbol representing the model version being fitted\nscalestrendoffset::Float64=0. : Scale (\"width\") of the Normal RV alpha (intercepts for different groups)\nscalestrend::Float64 = 0.2 : Scale (\"width\") of the Normal RV `betatrend` for input X_trend (flexible trend fitting, eg, with splines)\nscales_noise::Float64 = 0.2 : Extent of the random noise around deterministic trend / rate parameter of Exponential distribution for sigma\nscalescontext::AbstractArray{Float64} = ones(Float64,1) : Scale (\"width\") of the Normal RV `betacontext` for input X_context (context variables)\nscalesorg::AbstractArray{Float64} = ones(Float64,1) : Scale (\"width\") of the Normal RV `betaorg` for input X_feat (organic variables - can have only POSITIVE effect)\ndecayratealphas::AbstractArray{Float64} = ones(Float64,1) : decay_rate RV is modelled by Beta distribution, alpha is the corresponding parameter\ndecayratebetas::AbstractArray{Float64} = ones(Float64,1) :  decay_rate RV is modelled by Beta distribution, beta is the corresponding parameter\nadspendmeannonzero::AbstractArray{Float64} = ones(Float64,1) : Calculated quantity of the average non-zero spend (used to initialize halfmaxpoint)\nadspend_median::AbstractArray{Float64} = ones(Float64,1) : Calculated quantity of median of the spend\nlocsspendhalfmaxpoint::AbstractArray{Float64} = ones(Float64,1) : Center of the Normal RV halfmaxpoint for the halfmax concentration point in Hill Curve (can be initiated by average of the non-zero spend)\nscalesspendhalfmaxpoint::AbstractArray{Float64} = ones(Float64,1) :  Scale (\"width\") of the Normal RV halfmaxpoint for the halfmax concentration point in Hill Curve\nlocsspendbeta::AbstractArray{Float64} = ones(Float64,1) : Center of the Normal RV 'beta_spend' that represents the ROAS when the ad spend is at halfmaxpoint\nscalesspendbeta::AbstractArray{Float64} = ones(Float64,1) : Scale (\"width\") of the Normal RV 'beta_spend' that represents the ROAS when the ad spend is at halfmaxpoint \nunitsratiospendtoy::AbstractArray{Float64} = ones(Float64,1) : Ratio of ad spend to Y to be able to convert unit effect (used for factor_to_roas_of_one)\nfactortoroasofone::AbstractArray{Float64} : Conversion factor that ensures that provided beta_spend represents the ROAS when the ad spend is at halfmaxpoint\n\nExample:\n\np2=ParamsStage2(\n    model_name=Val(Symbol(MODEL_NAME)),\n    scales_trend_offset=0.3,\n    scales_trend=0.2,\n    scales_noise=0.3,\n)\n\np2 = set_priors_auto_scales(y_std,X_context,:scales_context,1.0,p2)\np2 = set_priors_auto_scales(y_std,X_org,:scales_org,1.0,p2)\np2 = set_priors_stage2_hill_curves(X_spend,p2;\n        units_ratio_spend_to_y=getindex.(pipe_cache_spend,:xh)/pipe_cache_y[1].xh,\n        halfmaxpoint_scale=0.3,expected_roas=1.0, expected_roas_scale=1.5)\np2 = set_priors_stage2_decay_rates([\"ooh\",\"digital\",\"digital\",\"ooh\",\"ooh\"],decay_rates_types_dictionary,p2,cols_spend)\n\nsanity_check_priors(p2;X_spend,X_context,X_org);\n\n\n\n\n\n","category":"type"},{"location":"api_reference/#MediaMixModellingDemo.calc_mroas-Tuple{Number, Number, AbstractMCMC.AbstractChains, Any, Int64}","page":"API Reference","title":"MediaMixModellingDemo.calc_mroas","text":"calc_mroas(x::Number, delta::Number, chain::AbstractMCMC.AbstractChains, p, slice_idx::Int)\n\nCalculate marginal ROAS (mROAS) at a given point x with a delta (=step size) for a variable under slice_idx   (ie, 3rd channel would have slice_idx=3)\n\nExample:  Calculate mROAS for all Ad spend variables with delta=0.01\n\n# p2=ParamsStage2() # model parameters from stage 2\n# chain is the result of fitting of stage 2 model\n# cols_spend are ad spend column names\nmroas_at_mean=[calc_mroas(p2.adspend_mean_nonzero[idx],0.01,chain,p2,idx)[1] for idx in 1:length(cols_spend)]\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#MediaMixModellingDemo.calc_roas","page":"API Reference","title":"MediaMixModellingDemo.calc_roas","text":"calc_roas(effect::Number, spend::Number, factor_spend_to_effect::Number=1)\n\nCalculates ROAS with an option to normalize the effect to the right scale (if Y and X are scaled)\n\n\n\n\n\n","category":"function"},{"location":"api_reference/#MediaMixModellingDemo.calc_roas-NTuple{4, AbstractArray}","page":"API Reference","title":"MediaMixModellingDemo.calc_roas","text":"calc_roas(effects::AbstractArray, spends::AbstractArray, factors_spend_to_effect::AbstractArray,weights::AbstractArray)\n\nCalculates Total ROAS (of all Ad channels) as a weighted-average of individual ROAS' weighted by the raw spend\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#MediaMixModellingDemo.convert_budget_multiplier_to_spend_multiplier-Tuple{AbstractVector, AbstractVector, AbstractVector}","page":"API Reference","title":"MediaMixModellingDemo.convert_budget_multiplier_to_spend_multiplier","text":"convert_budget_multiplier_to_spend_multiplier(spend_prev_trf::AbstractVector,\n                                                   factor_to_scale_spend_to_orig::AbstractVector,\n                                                   budget_multiplier::AbstractVector)\n\nConverts a relative budget_multiplier (a vector of %s for each marketing channel, eg,  [1,1.2,0.8])  to a spend_multiplier (=output), which retains the total amount of spend in the original domain  Ie, money money between channel while not changing the total spend\n\nExample:\n\nspend_prev_trf=X_spend|>Matrix|>sum_columns|>vec\nfactor_to_scale_spend_to_orig=getindex.(pipe_cache_spend,:xh)\nbudget_multiplier=ones(size(X_spend,2))\nspend_multiplier=convert_budget_multiplier_to_spend_multiplier(spend_prev_trf,factor_to_scale_spend_to_orig,budget_multiplier)\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#MediaMixModellingDemo.generate_fourier_series","page":"API Reference","title":"MediaMixModellingDemo.generate_fourier_series","text":"generate_fourier_series(t, p=365.25, n=5)\n\nGenerates fourier series with period p and degree n (the higher, the more flexible it is) It can be then fitted with coefficients to mimic any period trend\n\nExpects t to be a time index series\n\nReturns array of shape: (size(t,1),2n)\n\nExample\n\nseaso=generatefourierseries(1:400,365.25, 5)\n\n\n\n\n\n","category":"function"},{"location":"api_reference/#MediaMixModellingDemo.generate_objective_func","page":"API Reference","title":"MediaMixModellingDemo.generate_objective_func","text":"generate_objective_func(\n    chain_optim::AbstractMCMC.AbstractChains, \n        model_orig::DynamicPPL.Model,\n    X_spend::AbstractMatrix, optim_mask::BitVector,\n    spend_raw_sum::AbstractVector,\n    loss_func::Function = identity; \n    simulations_basecase = nothing,\n    extract_key::Symbol=:y)\n\nObjective function generator which runs directly off a budget_multiplier operating on the ad spend in original domain  and producing uplift in terms of revenues (or a chosen extract_key) Auxilary objective (gx) minimizes the delta between original adspend and new adspend (it must be strictly smaller or equal)\n\nNotes:\n\nThis version leaves ad spend budget balancing to the optimization algorithm\nThe simplest loss_func function that you can use is identity!\n\nOptional: simulation_basecase can be provided to speed up the optimization (ie, avoid re-computing the revenue under the old budget)\n\nIf optim_mask subsets data (ie, !=trues(size(Xspend,1))) then only the underlying segment of the `Xspend` matrix is changed   and only that portion of simulated revenues is considered for objective function\n\nExample:\n\n# Prepare inputs\nchain_optim=Chains(chain,:parameters)\nsimulations_prev=simulate_revenues_summed(chain_optim,model_orig,optim_mask;extract_key=:mu)\n\n# boundaries on possible solution\nlower_bound = 0.5*ones(length(cols_spend)) # max 50% reduction\nupper_bound = 1.5*ones(length(cols_spend)) # max 50% increase\nbounds = [lower_bound upper_bound]'\n\n# Bayesian Decision Theory -- how to weigh the outcomes across the posterior distribution\n# define a simple asymmetric (risk-averse) loss function\nloss_func(x)=x>0 ? 0.5x : x\n\n# All channels must have some spend in the optimization period!\n@assert all((@view(X_spend[optim_mask,:])|>sum_columns) .>0)\n\n# Method with direct budget multiplier\n# spend_raw_sum is masked with optim_mask!\nspend_raw_sum=revert_pipe_spend(X_spend[optim_mask,:])|>sum_columns\n\nobjective_func=generate_objective_func(\n    chain_optim,model_orig,Matrix(X_spend),optim_mask,\n    spend_raw_sum,loss_func;simulations_basecase=simulations_prev,extract_key=:mu)\n\n\n\n\n\n\n","category":"function"},{"location":"api_reference/#MediaMixModellingDemo.generate_objective_func-Tuple{AbstractMCMC.AbstractChains, DynamicPPL.Model, AbstractMatrix, BitVector, AbstractVector, Function, AbstractVecOrMat}","page":"API Reference","title":"MediaMixModellingDemo.generate_objective_func","text":"generate_objective_func(chain_optim::AbstractMCMC.AbstractChains, \nmodel_orig::DynamicPPL.Model,\nX_spend::AbstractMatrix, optim_mask::BitVector,\nfactor_to_scale_spend_to_orig::AbstractVector,\nloss_func::Function,\nbounds::AbstractVecOrMat;\nsimulations_basecase = nothing,\nextract_key::Symbol=:y)\n\nGenerates objective function that depends only on budget_multiplier input and returns simulated revenues and other requirements of Metaheuristics Checks that implied spend_multiplier_new (calculated from budget_multiplier) is within the provided bounds as auxilary objective\n\nNotes:\n\nThis version is suitable if optimization algorithm struggles to find solutions that maintain the same adspend (it balances it under the hood)\nThe simplest loss_func function that you can use is identity!\n\nOptional: simulation_basecase can be provided to speed up the optimization (ie, avoid re-computing the revenue under the old budget)\n\nIf optim_mask subsets data (ie, !=trues(size(Xspend,1))) then only the underlying segment of the `Xspend` matrix is changed   and only that portion of simulated revenues is considered for objective function\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#MediaMixModellingDemo.generate_seasonality_features-Tuple{Any, Any}","page":"API Reference","title":"MediaMixModellingDemo.generate_seasonality_features","text":"generate_seasonality_features(t, p=365.25, n=5)\n\nGenerates seasonality features given an array of tuples in a format (period,degree) Eg, 7-day period of degree 3 would be \n\nExpects t to be a time index series\n\nReturns array of shape: (size(t,1),2n)\n\nExample\n\nseaso=generatefourierseries(1:400,365.25, 5)\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#MediaMixModellingDemo.geometric_decay-Union{Tuple{T}, Tuple{AbstractVecOrMat{T}, Any}, Tuple{AbstractVecOrMat{T}, Any, Any}} where T<:Real","page":"API Reference","title":"MediaMixModellingDemo.geometric_decay","text":"geometric_decay(x::Vector{T},decay_rate,normalize=true) where {T<:Real}\n\nSimple geometric decay transformation if normalize=true it divides the output by the sum of the geometric series Note: Does NOT check if decay_rate<1 etc to ensure that the sum convergences to the analytic formula\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#MediaMixModellingDemo.getflatsamples-Tuple{Any, Any}","page":"API Reference","title":"MediaMixModellingDemo.getflatsamples","text":"getflatsamples(chain,groupname)\n\nExtract a group of variables under name groupname from chain   and flattens all samples into the first dimension  ie, outputs a dimension: (numsamples*numchains,num_variables)\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#MediaMixModellingDemo.hill_curve-Tuple{Any, Any, Any, Val{:safe}}","page":"API Reference","title":"MediaMixModellingDemo.hill_curve","text":"hill_curve(x, half_max_concentration_point, hill_coef,::Val{:safe})\n\nHill Curve-based spend saturation. Safe implementation that works better with ForwardDiff\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#MediaMixModellingDemo.hill_curve-Tuple{Any, Any, Any}","page":"API Reference","title":"MediaMixModellingDemo.hill_curve","text":"hill_curve(x, half_max_concentration_point, hill_coef)\n\nHill Curve-based spend saturation based on: https://www.physiologyweb.com/calculators/hillequationinteractive_graph.html\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#MediaMixModellingDemo.mean_fitted_effects-Tuple{Val{:model_stage2a}, Any}","page":"API Reference","title":"MediaMixModellingDemo.mean_fitted_effects","text":"extract_fitted_effects(::Val{:model_stage2a},generated_quant,\n    extract_keys=[:mu_trend,:mu_org,:mu_context,:mu_spend_by_var],mask=nothing)\n\nExtract specific keys from the generated_quantities produced by Turing generated_quantities() and concatenates them It should be implemented for each model to ensure the right logic\n\nReturns: a Vector (!)\n\nExample: mean_fitted_effects(Val(:model_stage2a),stage2_fit_allsamples) mean_fitted_effects(Val(:model_stage2a),stage2_fit_allsamples;extract_keys=[:mu_spend_by_var])\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#MediaMixModellingDemo.multiply_and_normalize-Tuple{AbstractVector, AbstractVector}","page":"API Reference","title":"MediaMixModellingDemo.multiply_and_normalize","text":"multiply_and_normalize(v::AbstractVector, multipliers::AbstractVector)\n\nMultiplies a vector v (of adspend) by multipliers in a way that doesn't change the overall sum\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#MediaMixModellingDemo.plot_periodogram","page":"API Reference","title":"MediaMixModellingDemo.plot_periodogram","text":"function plot_periodogram(input_arr,top_k)\n\nPlot Fourier transform coefficients to uncover the most prominent frequencies / seasonalities Assumes equally spaced data points Looks only for periods that have seen at least 2 full cycles (ie, size ÷ 2 at maximum!) Shows top-k values\n\nExample\n\np=10 # period is 10 y=sin.(2π/p*collect(1:20)) # generate 20 data points plot_periodogram(y,1) # plot periodogram, period=10 should be highlighted as maximum\n\n\n\n\n\n","category":"function"},{"location":"api_reference/#MediaMixModellingDemo.plot_priors_decay_rate","page":"API Reference","title":"MediaMixModellingDemo.plot_priors_decay_rate","text":"plot_priors_decay_rate(p,cols=nothing)\n\nPlots priors for decay rate in terms of Beta distributions\n\nExample: \n\np2=ParamsStage2()\ncols_spend=nothing # available from data prep\nplot_priors_decay_rate(p2,cols_spend)\n\n\n\n\n\n","category":"function"},{"location":"api_reference/#MediaMixModellingDemo.saturate_adspend-Tuple{Number, AbstractMCMC.AbstractChains, AbstractVector}","page":"API Reference","title":"MediaMixModellingDemo.saturate_adspend","text":"saturate_adspend(x::Number, chain::AbstractMCMC.AbstractChains, factor_to_roas_of_one::AbstractVector)\n\nExtracts Hill Curve parameters and the corresponding beta coefficients from provided chain  and applies them to a provided point (x)\n\nWARNING: Depends on model implementation using the same RVs as modelstage2a, ie, `betaspend,halfmaxpoint,slope`\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#MediaMixModellingDemo.set_priors_auto_scales","page":"API Reference","title":"MediaMixModellingDemo.set_priors_auto_scales","text":"set_priors_auto_scales(y::AbstractArray,X,param_key::Symbol,factor::Union{Number,AbstractArray}=1.0,\n    existing_params=ParamsStage1())\n\nSets scales such that 1 standard dev of input data (X) could trigger at most 3standard dev. response of Y (y)  (because beta coefficient are Normal). This can be increased by factor (defaults to 1.0x). Result is saved into a Parameters object (as per constructor) under a key param_key It can extend (selectively update) existing set of parameters (provide to argument existing_params)\n\nSpecial behaviour:\n\nValues are clipped to range 0.05 - 10. (warning will be issued if it's exceeded)\nShortcuts to straight passthrough if X=nothing\n\n\n\n\n\n","category":"function"},{"location":"api_reference/#MediaMixModellingDemo.set_priors_stage2_decay_rates","page":"API Reference","title":"MediaMixModellingDemo.set_priors_stage2_decay_rates","text":"set_priors_stage2_decay_rates(decay_rate_types::AbstractArray{String},\n    decay_rates_types_dictionary::Dict=decay_rates_types_dictionary,\n    existing_params=ParamsStage2(),var_names=nothing)\n\nSets decay rates priors (for Beta distribution) as a dictionary lookup   of different options available in decay_rates_types_dictionary (eg, \"tv\", \"digital\")\n\nExample:\n\ntypes_=[\"ooh\",\"digital\",\"digital\",\"ooh\",\"ooh\"]\nset_priors_stage2_decay_rates(types_,decay_rates_types_dictionary,p2,cols_spend)\n\n\n\n\n\n","category":"function"},{"location":"api_reference/#MediaMixModellingDemo.simulate_revenues_summed-Tuple{AbstractMCMC.AbstractChains, DynamicPPL.Model, BitVector}","page":"API Reference","title":"MediaMixModellingDemo.simulate_revenues_summed","text":"simulate_revenues_summed(chain_optim::AbstractMCMC.AbstractChains, model_optim::DynamicPPL.Model,\n\noptimmask::BitVector;extractkey::Symbol=:y)\n\nSamples posterior predictive from model model_optim conditioned on Chains chain_optim. Optional - you can provide a mask optim_mask (for time dimensions/1st dimension) and Symbol for the posterior predictive value (extract_key)\n\nExample:\n\nsimulations_prev=simulate_revenues_summed(chain_optim,model_orig,optim_mask;extract_key=:y)\n\nFor budget simulations we replace inputs in the model like:\n\nchain_optim=Chains(chain,:parameters)\nmodel_args_prev=model_orig.args;\n# replace the old spend with new\nmodel_args_new=merge(model_args_prev,(;X_spend=X_spend_new));\nsimulations=simulate_revenues_summed(chain_optim,model_stage2a(model_args_new...),optim_mask);\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#MediaMixModellingDemo.standardize_by_max-Tuple{Any}","page":"API Reference","title":"MediaMixModellingDemo.standardize_by_max","text":"standardize_by_max(X)\n\nMax()-only transform to allow easy scaling between features and the outcome Uses MinMax() pipe under the hood but overwrites the minimum to be =0\n\nExample: y_std,pipe_cache_y=standardize_by_max(select(df,target_label))\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#MediaMixModellingDemo.standardize_by_zscore-Tuple{Any}","page":"API Reference","title":"MediaMixModellingDemo.standardize_by_zscore","text":"standardize_by_zscore(X)\n\nZscore transform to center the feature to its mean value and scale it (to make it easier to set priors)\n\nExample: y_std,pipe_cache_y=standardize_by_zscore(select(df,target_label))\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#MediaMixModellingDemo.sum_columns-Tuple{AbstractMatrix}","page":"API Reference","title":"MediaMixModellingDemo.sum_columns","text":"sum_columns(x::AbstractMatrix)\n\nUnified interface that sums columns of a provided Matrix/DataFrame/Vector Returns a Vector (!)\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#MediaMixModellingDemo.threaded_objective_func-Tuple{Any, Any}","page":"API Reference","title":"MediaMixModellingDemo.threaded_objective_func","text":"threaded_objective_func(budget_multipliers,objective_func)\n\nParallelizes provided function objective_func for Metaheuristics optimization loop  by leveraging available threads in your Julia instance\n\nExample:\n\nMake sure to change the keyword to parallel_evaluation=true\n\noptions = Metaheuristics.Options(time_limit=10.,debug=false,parallel_evaluation=true)\n@time result = Metaheuristics.optimize(x->threaded_objective_func(x,objective_func), bounds, \n    Metaheuristics.ECA(N=7*2*length(cols_spend),K=7,η_max=2.,options=options))\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#MediaMixModellingDemo.to_masked_matrix","page":"API Reference","title":"MediaMixModellingDemo.to_masked_matrix","text":"to_masked_matrix(x::DataFrame,mask=trues(size(x,1)))\n\nConvert DataFrame to a matrix and apply a mask to its rows if provided\n\n\n\n\n\n","category":"function"},{"location":"api_reference/#MediaMixModellingDemo.workflow_budget_to_simulation-Tuple{AbstractMCMC.AbstractChains, DynamicPPL.Model, AbstractMatrix, BitVector, AbstractVector, AbstractVector}","page":"API Reference","title":"MediaMixModellingDemo.workflow_budget_to_simulation","text":"workflow_budget_to_simulation(\n                chain_optim::AbstractMCMC.AbstractChains, model_orig::DynamicPPL.Model,\n               X_spend::AbstractMatrix, optim_mask::BitVector,\n               factor_to_scale_spend_to_orig::AbstractVector,\n               budget_multiplier::AbstractVector)\n\nFor a given context (budget_multiplier) produces new adspend (X_spend_new) and associated simulated revenues (smulations_new) Used to produced an objective function for the optimization that depends only on budget_multiplier\n\n\n\n\n\n","category":"method"},{"location":"practical_tips/#Practical-Tips","page":"Practical Tips and Tricks","title":"Practical Tips","text":"","category":"section"},{"location":"practical_tips/#Getting-Started","page":"Practical Tips and Tricks","title":"Getting Started","text":"","category":"section"},{"location":"practical_tips/","page":"Practical Tips and Tricks","title":"Practical Tips and Tricks","text":"As the first step, read through the Robyn package documentation","category":"page"},{"location":"practical_tips/#Frequently-Asked-Questions","page":"Practical Tips and Tricks","title":"Frequently Asked Questions","text":"","category":"section"},{"location":"practical_tips/","page":"Practical Tips and Tricks","title":"Practical Tips and Tricks","text":"To be updated...","category":"page"},{"location":"practical_tips/","page":"Practical Tips and Tricks","title":"Practical Tips and Tricks","text":"\"I still don't understand the concept of Adstock\" \nRead the following article on Adstock\nHow to set priors for ad-spend variables\n(Robyn documentation / section on Adstock and Dim. returns](https://facebookexperimental.github.io/Robyn/docs/features) provides some rules of thumb\nDecay rate priors (implicitly defined via half-life ranges) are also mentioned on Wikipedia, however, they imply quite a long lasting effect. Always ask the experts if it's realistic for your business/type of campaign/position in the funnel!\nFor beta_spend coefficients use either a conservative range (eg, centered around 1 and from 0 to 5) or leverage data from previous experiments / from experts\nHow to set priors for all else\nTalk to the subject matter experts in your business on what a realistic range of values would be (on the overall modelled quantity / for the implied dynamic). If it's hard to judge, ask them for what values would be impossible, which gives you edges for your prior distributions. If possible, ask them to also give you a sense how quite the likelihood of different values goes up or down within the range (good exercise is to ask them to stack PET bottle caps or post-it note packs to representive the relative likelihood of different values)\nOnce you know some boundary values and the relative shape, play with plot() and various distributions to achieve the desired fit, eg, plot(Beta(10,10)) and visually inspect if it matches the provided knowledge\nHow to fit\nDiscussion on 1 vs 2 stages...(TBU)\nExcellent paper on Bayesian workflow\nHow to extend / more advanced implementations\nComplicated trends: splines (example provided for Splines2 package)\nBig data - Variation Inference in Turing (ELBO!), ZigZag, or simply a MAP\nWhat are some good diagnostics\nBayesian workflow\nRhat metric should never be above 1.1, ideally close to 1.0 for the parameters that we care about\n(HMC/NUTS specific) No divergences. Divergences indicate that the algorithm was not able to fully explore the posterior distribution. There is a folk theorem that it's usually due to a bad model - investigate pair plots, variables with low rhat or with low n_eff and try to re-paramterize where possible. You can read more in Stan Manual\nOther diagnostics include traceplots, rankplots, loo-psis, ppc, etc. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = MediaMixModellingDemo","category":"page"},{"location":"#Introduction","page":"Home","title":"Introduction","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This is a documentation for MediaMixModellingDemo.","category":"page"},{"location":"","page":"Home","title":"Home","text":"It's an example produced to acompany a talk at JuliaCon 2022.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Pages = [\"index.md\", \"methodology.md\",\"practical_tips.md\",\"resources.md\"]\nDepth = 3","category":"page"},{"location":"methodology/#Methodology","page":"Methodology","title":"Methodology","text":"","category":"section"},{"location":"methodology/#Overview","page":"Methodology","title":"Overview","text":"","category":"section"},{"location":"methodology/","page":"Methodology","title":"Methodology","text":"To be updated...","category":"page"},{"location":"methodology/","page":"Methodology","title":"Methodology","text":"Transform data \nVariables that can have positive-only effects need to be standardized to 0-1 range\nVariables with any-signed effects need to be at least standardized via Z-Score\nNote: Code expects certain naming conventions (eg, X_spend for the DataFrame of the ad spend variables to be modelled)\nSet priors / conversion factors\nBe restrictive in the marketing transforms' parameters\nStage 1: Fit the trend\nExtract separate series for growth trend, seasonality, holidays, organic variables \nStage 2: Fit the coefficients for marketing transformation\nValidate the fit (Rhat, traceplots, etc)\nQuantify the contributions + ROAS of the current marketing spend\nOptimize the marketing budget to maximize the marketing contribution \nDefine a loss function that reflects your business' decision-making process\nEvaluate the results of the optimization + inherent uncertainty","category":"page"},{"location":"methodology/#Tricks-to-make-it-work","page":"Methodology","title":"Tricks to make it work","text":"","category":"section"},{"location":"methodology/","page":"Methodology","title":"Methodology","text":"Use structural decomposition of the time series (trend, seasonality, holidays, etc.)\nSetting informed priors\nRe-parametrization of the beta_spend coefficients\nTwo-stage fit\nNon-convex optimization","category":"page"}]
}
